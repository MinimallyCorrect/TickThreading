buildscript {
	repositories {
		jcenter()
		maven { url "https://repo.nallar.me/" }
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "http://files.minecraftforge.net/maven" }
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'org.minimallycorrect.modpatcher:ModPatcherGradle:0.1-SNAPSHOT'
		classpath 'org.minimallycorrect.libloader:LibLoaderGradle:0.1-SNAPSHOT'
		classpath 'org.minimallycorrect.gradle:DefaultsPlugin:0.0.28'
	}
}
apply plugin: 'org.minimallycorrect.gradle.DefaultsPlugin'
apply plugin: 'org.minimallycorrect.modpatcher.ModPatcherGradle'
apply plugin: 'org.minimallycorrect.libloader.LibLoaderGradle'

group = 'org.minimallycorrect.tickthreading'

minimallyCorrectDefaults {
	minecraft = 1.12
	fmlCorePlugin = "org.minimallycorrect.tickthreading.mod.TickThreadingCore"
	fmlCorePluginContainsFmlMod = true
	labels = ['minecraft-mod', 'threading', 'minecraft', 'java', 'performance']
	description = "Multi-threaded minecraft. Performance over correctness. What could go wrong?"
} ()

gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS

modpatcher {
	mixinPackage = "org.minimallycorrect.tickthreading.mixin"
	extractGeneratedSources = true
	generateInheritanceHierarchy = true
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	testCompile 'junit:junit:4.12'
	compileOnly 'org.jetbrains:annotations:15.0'
	testCompileOnly 'org.projectlombok:lombok:1.16.18'
	testCompileOnly 'org.jetbrains:annotations:15.0'
	libLoader "org.minimallycorrect.typedconfig:TypedConfig:0.1-SNAPSHOT"
	libLoader "org.minimallycorrect.modpatcher:ModPatcher:${minimallyCorrectDefaults.minecraft}-SNAPSHOT"
}

if (System.env.GRADLE_USER_HOME) {
	ext.homeDir = System.env.GRADLE_USER_HOME + '/'
} else {
	ext.homeDir = System.properties['user.home'] + '/.gradle/'
}
ext.mappingsPath = homeDir + 'caches/minecraft/net/minecraftforge/forge/' + minimallyCorrectDefaults.forge + '/unpacked/conf/'

def jarConfig = {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from mappingsPath + 'packaged.srg'
	from mappingsPath + 'methods.csv'
	from mappingsPath + 'fields.csv'
	from './generated/extendsMap.obj'
}

jar jarConfig

jar {
	classifier = 'extended'
}

def outputJarFile = (File) jar.outputs.files.getSingleFile()
def coreJarFile = new File(outputJarFile.getParentFile(), outputJarFile.getName().replace('extended', 'core-borked'))

println(coreJarFile)

task coreJar(type: Jar, dependsOn: retromapReplacedMain) {
	with jar
	classifier = "core"
	exclude('org/minimallycorrect/tickthreading/mixin/extended**')
}

artifacts {
	archives jar
	archives coreJarFile
}

build.dependsOn(coreJar)

// Source compiler configuration
tasks.withType(JavaCompile) {
	sourceCompatibility = 8
	targetCompatibility = 8
	options.with {
		deprecation = true
		encoding = 'UTF-8'
		compilerArgs <<
			"-XDignore.symbol.file=true" <<
			"-Xlint:all" <<
			"-Xlint:-path" <<
			"-Xlint:-processing"
		fork = true
		forkOptions.executable = 'javac'
	}
}
